---
apiVersion: v1
kind: Secret
metadata:
  name: harbor-ldap-configurator-tf-vars
  namespace: harbor
type: Opaque
stringData:
  TF_VAR_harbor_url: http://harbor-core.harbor.svc.cluster.local
  TF_VAR_admin_username: admin
  TF_VAR_admin_password: Kubernetes1!
  TF_VAR_ldap_config: |
    {
      ldap_url                        = "ldaps://cloudnativeapps.cloud:636"
      ldap_search_dn                  = "CN=k8s-ldaps,OU=ServiceAccounts,OU=cloudnativeapps,DC=cloudnativeapps,DC=cloud"
      ldap_search_password            = "Kubernetes1!"
      ldap_base_dn                    = "DC=cloudnativeapps,DC=cloud"
      ldap_filter                     = "objectclass=person"
      ldap_uid                        = "sAMAccountName"
      ldap_scope                      = 2 # Subtree
      ldap_group_base_dn              = "DC=cloudnativeapps,DC=cloud"
      ldap_group_search_filter        = "objectclass=group"
      ldap_group_attribute_name       = "sAMAccountName"
      ldap_group_admin_dn             = "CN=harbor-admins,OU=Groups,OU=cloudnativeapps,DC=cloudnativeapps,DC=cloud"
      ldap_group_membership_attribute = "memberof"
      ldap_group_search_scope         = 2 # Subtree
      ldap_verify_cert                = true
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-ldap-configurator-tf-main
  namespace: harbor
data:
  main.tf: |
    terraform {
      required_providers {
        terracurl = {
          source  = "devops-rob/terracurl"
          version = "1.2.1"
        }
      }
      required_version = ">= 1.3.0"
    }

    provider "terracurl" {}

    variable "harbor_url" {
      description = "Harbor hostname"
      type        = string
    }

    variable "admin_username" {
      description = "Harbor admin username"
      type        = string
    }

    variable "admin_password" {
      description = "Harbor admin password"
      type        = string
      sensitive   = true
    }

    variable "ldap_config" {
      description = "Harbor LDAP configurations"
      type        = map(string)
      sensitive   = true
    }

    data "terracurl_request" "ldap_configuration" {
      name            = "harbor_ldap_configuration"
      method          = "PUT"
      response_codes  = [200]
      skip_tls_verify = true

      url = "${var.harbor_url}/api/v2.0/configurations"

      headers = {
        "Content-Type"  = "application/json"
        "Accept"        = "application/json"
        "Authorization" = "Basic ${base64encode("${var.admin_username}:${var.admin_password}")}"
      }

      request_body = templatefile("${path.module}/harbor_ldap_config.json.tpl", var.ldap_config)
    }

    data "terracurl_request" "ldap_verification" {
      name            = "harbor_ldap_verification"
      method          = "POST"
      response_codes  = [200]
      skip_tls_verify = true

      url = "${var.harbor_url}/api/v2.0/ldap/ping"

      headers = {
        "Content-Type"  = "application/json"
        "Accept"        = "application/json"
        "Authorization" = "Basic ${base64encode("${var.admin_username}:${var.admin_password}")}"
      }

      request_body = templatefile("${path.module}/harbor_ldap_config.json.tpl", var.ldap_config)
    }

    output "harbor_ldap_connection_result" {
      value = jsondecode(data.terracurl_request.ldap_verification.response)
    }
  harbor_ldap_config.json.tpl: |
    {
      "auth_mode": "ldap_auth",
      "ldap_url": "${ldap_url}",
      "ldap_search_dn": "${ldap_search_dn}",
      "ldap_search_password": "${ldap_search_password}",
      "ldap_base_dn": "${ldap_base_dn}",
      "ldap_filter": "${ldap_filter}",
      "ldap_uid": "${ldap_uid}",
      "ldap_scope": ${ldap_scope},
      "ldap_group_base_dn": "${ldap_group_base_dn}",
      "ldap_group_search_filter": "${ldap_group_search_filter}",
      "ldap_group_attribute_name": "${ldap_group_attribute_name}",
      "ldap_group_admin_dn": "${ldap_group_admin_dn}",
      "ldap_group_membership_attribute": "${ldap_group_membership_attribute}",
      "ldap_group_search_scope": ${ldap_group_search_scope},
      "ldap_verify_cert": ${ldap_verify_cert}
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-ldap-configurator
  namespace: harbor
  labels:
    app.kubernetes.io/name: harbor-ldap-configurator
spec:
  backoffLimit: 20 # Number of retries before considering the job failed
  completions: 1  # Total number of successful completions required
  parallelism: 1  # Maximum number of pods to run concurrently
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor-ldap-configurator
    spec:
      restartPolicy: OnFailure
      containers:
      - name: harbor-ldap-configurator
        image: hashicorp/terraform:1.9.8
        command: ["/bin/sh"]
        args: ["-c", "terraform init && terraform apply -auto-approve"]
        workingDir: /harbor-ldap-configurator
        envFrom:
        - secretRef:
            name: harbor-ldap-configurator-tf-vars
        volumeMounts:
        - name: harbor-ldap-configurator-tf-main
          mountPath: /harbor-ldap-configurator/main.tf
          subPath: main.tf
          readOnly: true
        - name: harbor-ldap-configurator-tf-main
          mountPath: /harbor-ldap-configurator/harbor_ldap_config.json.tpl
          subPath: harbor_ldap_config.json.tpl
          readOnly: true
        resources:
          requests:
            memory: 500Mi
            cpu: 500m
          limits:
            memory: 500Mi
            cpu: 500m
      volumes:
      - name: harbor-ldap-configurator-tf-main
        configMap:
          name: harbor-ldap-configurator-tf-main